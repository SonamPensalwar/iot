 Code: 
#include <WiFi.h> 
#include <ESPAsyncWebServer.h> #include <ESP32Servo.h> const int ledPin = 27; // LED connected to GPIO 27 
const int motorPin1 = 33; // DC motor IN1 connected to GPIO 33 
const int servoPin = 13; // Servo control connected to GPIO 13 
// Set up Servo 
Servo doorServo; 
// Set up Async Web Server on port 80 
AsyncWebServer server(80); // Wi-Fi credentials const char* ssid = "moto g34 5G_8578"; const char* password = "Whyareyouhere?"; 
// Static IP Configuration 
IPAddress local_IP(192, 168, 112, 25);    // ESP32 static IP 
IPAddress gateway(192, 168, 112, 1);      // Gateway IP  
IPAddress subnet(255, 255, 255, 0);       // Subnet mask 
// HTML content for the control interface const char* htmlContent = R"rawliteral( 
<!DOCTYPE html> 
<html> 
<head> 
  <title>Home Automation</title> 
  <style> 
    body { font-family: Arial, sans-serif; }     h2 { color: #4CAF50; } 
    button { padding: 10px 20px; margin: 10px; background-color: #4CAF50; color: white; border: none; cursor: pointer; }     button:hover { background-color: #45a049; } 
  </style> 
</head> 
<body> 
  <h2>Home Automation Control</h2> 
  <h3>LED Control</h3> 
  <button onclick="toggleLED('on')">Turn LED On</button> 
  <button onclick="toggleLED('off')">Turn LED 
Off</button> 
  <h3>DC Motor Control</h3> 
  <button onclick="toggleMotor('on')">Turn Motor On</button> 
  <button onclick="toggleMotor('off')">Turn Motor 
Off</button> 
  <h3>Door Control</h3> 
  <button onclick="toggleDoor('open')">Open Door</button> 
  <button onclick="toggleDoor('close')">Close 
Door</button> 
  <script>     function toggleLED(state) {       fetch(`/led?state=${state}`); 
    } 
    function toggleMotor(state) {       fetch(`/motor?state=${state}`); 
    } 
    function toggleDoor(state) {       fetch(`/servo?state=${state}`); 
    } 
  </script> 
</body> 
</html> 
)rawliteral"; 
// Function to control LED void handleLED(AsyncWebServerRequest *request) {   String ledState = request->getParam("state")-
>value();   if (ledState == "on") {     digitalWrite(ledPin, HIGH); 
  } else { 
    digitalWrite(ledPin, LOW); 
  } 
  request->send(200, "text/html", "LED state changed"); 
} 
//Function to control dc motor 
void handleMotor(AsyncWebServerRequest *request) 
{ 
  String motorState = request->getParam("state")-
>value();   if (motorState == "on") {     digitalWrite(motorPin1, HIGH); 
  } else { 
    digitalWrite(motorPin1, LOW); 
  } 
  request->send(200, "text/html", "Motor state changed"); 
} 
//function to control servo motor 
void handleServo(AsyncWebServerRequest *request) 
{ 
  String servoState = request->getParam("state")-
>value();   if (servoState == "open") {     doorServo.write(0);  // Open door (0 degrees)   } else if (servoState == "close") {     doorServo.write(90); // Close door (90 degrees) 
  } 
  request->send(200, "text/html", "Door state changed"); 
} 
void setup() { 
 
  // Initialize serial communication 
  Serial.begin(115200); 
  // Initialize pins 
  pinMode(ledPin, OUTPUT);   pinMode(motorPin1, OUTPUT); 
   
  // Initialize Servo   doorServo.attach(servoPin);   // Set static IP address   if (!WiFi.config(local_IP, gateway, subnet)) { 
    Serial.println("Static IP configuration failed!"); 
  } 
  // Connect to Wi-Fi   WiFi.begin(ssid, password);   while (WiFi.status() != WL_CONNECTED) {     delay(1000); 
    Serial.println("Connecting to WiFi..."); 
  } 
  Serial.println("Connected to WiFi"); 
 
  // Define web server routes 
  server.on("/", HTTP_GET, [](AsyncWebServerRequest 
*request){ 
    request->send(200, "text/html", htmlContent); // Serve the HTML page 
  }); 
  server.on("/led", HTTP_GET, handleLED);   server.on("/motor", HTTP_GET, handleMotor);   server.on("/servo", HTTP_GET, handleServo); 
  // Start the server   server.begin(); 
  Serial.println("Server started"); 
} 
void loop(){   //Nothing 
